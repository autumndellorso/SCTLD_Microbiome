## INSTALLING AND LOADING PACKAGES ##

install.packages("devtools")
library(devtools)
install.packages("dplyr")
library(dplyr)
install.packages("tidyr")
library(tidyr)
install.packages("ggplot2")
library(ggplot2)
install.packages("tidyverse")
library(tidyverse)
install.packages("dplyr")
library(dplyr)
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("Bioconductor") 
library (Bioconductor)
BiocManager::install("phyloseq") 
library(phyloseq)
packageVersion("phyloseq")
BiocManager::install("ANCOMBC")
library(ANCOMBC)
packageVersion("ANCOMBC")
BiocManager::install("microbiome")
library(microbiome)
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
library("qiime2R")
packageVersion("qiime2R")
install.packages("readr")
library(readr)
install.packages("vegan")
library(vegan)
install.packages("dendextend")
library(dendextend)
install.packages("viridis")
library(viridis)
install.packages("ggpubr")
library(ggpubr)
install.packages("eulerr")
library(eulerr)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis", force=TRUE)
library(pairwiseAdonis)
install.packages("rlang")
library(rlang)
install.packages("phytools")
library(phytools)
install.packages("DESeq2")
library(DESeq2)
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("paletteer")
library(paletteer)

#############################################################################################

## READING IN FILES ##

#Reading the taxonomy and asv table in
taxonomy = readr::read_tsv("C:/Users/dello/OneDrive/Documents/NOAA Internship/taxonomy.tsv")
print(taxonomy)

#Reading in the taxonomy by .qza file. Produces the same thing as reading it in by .tsv
Tax = read_qza("C:/Users/dello/OneDrive/Documents/NOAA Internship/taxon_SCTLD_Acer.qza")
Tax_data = Tax$data

ASV = read_qza("C:/Users/dello/OneDrive/Documents/NOAA Internship/table-BacArc_SCTLD_Acer.qza")
ASV_data = ASV$data

#Setting my working directory
setwd("C:/Users/dello/OneDrive/Documents/NOAA Internship")

#Reading in the metadata csv file from the NOAA drive steph and I made
metadata = read.csv("Revised_Metadata_SR.csv", header = TRUE, row.names = 1)

#Removing two samples from metadata that I wont need for later Ofav analysis
metadata_O = metadata[!row.names(metadata) %in% c("100-Autumn16s", "13-Autumn16s"),]

#Removing paired Ofav samples
metadata_O_D = metadata[!row.names(metadata) %in% c("100-Autumn16s", "13-Autumn16s", "16-Autumn16s", "12-Autumn16s"),]

#############################################################################################

## CREATE PHYLOSEQ OBJECT AND ADJUST TAXA TABLE ##

#Everything for the phyloseq object is now read in.
#This separated taxonomy column from tab delim to separate feature columns, got rid of the confidence column, and added an ASV column.
#Also filtering out whole rows that have chlorophyta and NA in the Phylum column, turns out I didnt need to do this but keeping the code for reference.
Taxo <- Tax$data %>% as_tibble() %>% separate(Taxon, sep=";", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) %>%
  select(-Confidence) %>% arrange(Feature.ID) %>% mutate(ASV = 1:n()) %>% 
  mutate(newcol = "ASV") %>%
  unite("ASVs", newcol:ASV)
  #filter(Phylum !=" p__Chlorophyta") %>%
  #filter(Phylum !="NA")

#Making a phyloseq object.
phy= phyloseq(otu_table(ASV_data, taxa_are_rows= T),
             tax_table(as.data.frame(Taxo) %>% column_to_rownames("Feature.ID") %>%
                         as.matrix()), sample_data(metadata))
#phyloseq with removed Ofav controls
phy2= phyloseq(otu_table(ASV_data, taxa_are_rows= T),
              tax_table(as.data.frame(Taxo) %>% column_to_rownames("Feature.ID") %>%
                          as.matrix()), sample_data(metadata_O))
#phyloseq with removed ofav pairs
phy3= phyloseq(otu_table(ASV_data, taxa_are_rows= T),
               tax_table(as.data.frame(Taxo) %>% column_to_rownames("Feature.ID") %>%
                           as.matrix()), sample_data(metadata_O_D))
#number of taxa
ntaxa(phy) #12302
ntaxa(phy2) #12302

#number of samples
nsamples(phy) #102
nsamples(phy2) #100
nsamples(phy3) #98

#number of variables
sample_variables(phy) #18 metadata columns
sample_variables(phy2) #20

#############################################################################################

## PHYLOGENETIC TREE ##

#Reading in the phylogenetic tree and trying to view it. 
#Comes out an absolute jumble. Sub-setting would make it more readable.
Tree = ape::read.tree("C:/Users/dello/OneDrive/Documents/NOAA Internship/tree.nwk")

plotTree(Tree)
#This made the font smaller, but unsuccessfully removed labels
plotTree(Tree,fsize=0.5, ftype="i", show.tip.label = FALSE, show.node.label = FALSE) 

#############################################################################################

## SUBSETTING AND FILTERING PHYLOSEQ OBJECT METADATA ##

#Subsetting phyloseq metadata into Montastrea and Orbicella together, then by treatment and paired.
MO = c("Mcav", "Ofav")  
DC = c("Disease","Control")
phyMO = subset_samples(phy, sample_data(phy)$Treatment %in% c(DC) & sample_data(phy)$CoralSpecies %in% c(MO) & sample_data(phy)$Paired == "paired")
sample_data(phyMO)
#Filter mcav and ofav phyloseq object that include only the taxa (ASVs) that have a count greater than 6 in at least 20% of the samples
phyMO_filt = filter_taxa(phyMO, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyMO_filt

#Subset only Mcav
Mcav = c("Mcav")
DC = c("Disease","Control")
phyMcav = subset_samples(phy, sample_data(phy)$Treatment %in% c(DC) & sample_data(phy)$CoralSpecies %in% c(Mcav) & sample_data(phy)$Paired == "paired")
sample_data(phyMcav)
#Filter only Mcav
phyMcav_filt = filter_taxa(phyMcav, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyMcav_filt

#Subset only Ofav
Ofav = c("Ofav")
phyOfav = subset_samples(phy, sample_data(phy)$Treatment %in% c(DC) & sample_data(phy)$CoralSpecies %in% c(Ofav) & sample_data(phy)$Paired == "paired")
sample_data(phyOfav)
#Filter only ofav
phyOfav_filt = filter_taxa(phyOfav, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyOfav_filt

#Subset Ofav with removed controls only
phyOfav2 = subset_samples(phy2, sample_data(phy2)$Treatment %in% c(DC) & sample_data(phy2)$CoralSpecies %in% c(Ofav) & sample_data(phy2)$Paired == "paired")
sample_data(phyOfav2)
#Filter removed pair ofav
phyOfav2_filt = filter_taxa(phyOfav2, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyOfav2_filt

#Subset Ofav with removed pairs 
phyOfav3 = subset_samples(phy3, sample_data(phy3)$Treatment %in% c(DC) & sample_data(phy3)$CoralSpecies %in% c(Ofav) & sample_data(phy3)$Paired == "paired")
sample_data(phyOfav3)
#Filter Ofav removed pairs
phyOfav3_filt = filter_taxa(phyOfav3, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyOfav3_filt

#Subsetting phyloseq metadata into Acropora and Porites together, then by treatment and paired.
AP = c("Acer","Past")
phyAP = subset_samples(phy, sample_data(phy)$Treatment %in% c(DC) & sample_data(phy)$CoralSpecies %in% c(AP) & sample_data(phy)$Paired == "paired")
phyAP.dataframe = as.data.frame(sample_data(phyAP))
#Filter Acropora and Porites
phyAP_filt = filter_taxa(phyAP, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyAP_filt

#Subsetting phyloseq metadata into Porites only
Porites = c("Past")
phyP = subset_samples(phy, sample_data(phy)$Treatment %in% c(DC) & sample_data(phy)$CoralSpecies %in% c(Porites) & sample_data(phy)$Paired == "paired")
phyP.dataframe = as.data.frame(sample_data(phyAP))
#Filter Past
phyP_filt = filter_taxa(phyP, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyP_filt

#Subsetting phyloseq metadata into Acropora only, then by treatment and paired.
Acer = c("Acer")
phyA = subset_samples(phy, sample_data(phy)$Treatment %in% c(DC) & sample_data(phy)$CoralSpecies %in% c(Acer) & sample_data(phy)$Paired == "paired")
phyA.dataframe = as.data.frame(sample_data(phyA))
#Filter Acer
phyA_filt = filter_taxa(phyA, function(x) sum(x > 6) > (0.20*length(x)), TRUE)
phyA_filt

#Subset and filter original phyloseq object
phy_sub = subset_samples(phy, sample_data(phy)$Treatment %in% c(DC) & sample_data(phy)$Paired == "paired")
phy_filt= filter_taxa(phy_sub, function(x) sum(x > 6) > (0.20*length(x)), TRUE)

#Number of samples and taxa in filtered phyloseqs
nsamples(phyMO_filt) #28
ntaxa(phyMO_filt) #302

nsamples(phyMcav_filt) #18
ntaxa(phyMcav_filt) #311

nsamples(phyOfav_filt) #10
ntaxa(phyOfav_filt)#332

nsamples(phyOfav2_filt) #8
ntaxa(phyOfav2_filt)#435

nsamples(phyOfav3_filt) #6
ntaxa(phyOfav3_filt)#299

nsamples(phyAP_filt) #10
ntaxa(phyAP_filt) #198

nsamples(phyP_filt) #8
ntaxa(phyP_filt) #478

nsamples(phyA_filt) #2
ntaxa(phyA_filt) #201

#############################################################################################

## ANCOMBC ANALYSIS ##

#ANCOMBC for Mcav and Ofav by treatment and ASV level
AnMO = ancombc2(
    phyMO_filt,
    assay_name = "otu_table",
    fix_formula = "Treatment",
    rand_formula = NULL,
    p_adj_method = "holm",
    prv_cut = 0,
    lib_cut = 0,
    s0_perc = 0.05,
    group = NULL,
    struc_zero = FALSE,
    neg_lb = FALSE,
    alpha = 0.05,
    verbose = FALSE,
    global = FALSE,
    pairwise = FALSE,
    dunnet = FALSE,
    trend = FALSE)

resMO = AnMO$res

#ANCOMBC for Mcav only by treatment and ASV level
AnMcav = ancombc2(
  phyMcav_filt,
  assay_name = "otu_table",
  fix_formula = "Treatment",
  rand_formula = NULL,
  p_adj_method = "holm",
  prv_cut = 0.1,
  lib_cut = 0,
  s0_perc = 0.05,
  group = NULL,
  struc_zero = FALSE,
  neg_lb = FALSE,
  alpha = 0.05,
  verbose = FALSE,
  global = FALSE,
  pairwise = FALSE,
  dunnet = FALSE,
  trend = FALSE)

resMcav = AnMcav$res

#ANCOMBC for Ofav only by treatment and ASV level
AnOfav = ancombc2(
  phyOfav_filt,
  assay_name = "otu_table",
  fix_formula = "Treatment",
  rand_formula = NULL,
  p_adj_method = "holm",
  prv_cut = 0.1,
  lib_cut = 0,
  s0_perc = 0.05,
  group = NULL,
  struc_zero = FALSE,
  neg_lb = FALSE,
  alpha = 0.05,
  verbose = FALSE,
  global = FALSE,
  pairwise = FALSE,
  dunnet = FALSE,
  trend = FALSE)

resOfav = AnOfav$res

#ANCOMBC for Acer and Past by treatment and ASV level
AnAP = ancombc2(
  phyAP_filt,
  assay_name = "otu_table",
  fix_formula = "Treatment",
  rand_formula = NULL,
  p_adj_method = "holm",
  prv_cut = 0.1,
  lib_cut = 0,
  s0_perc = 0.05,
  group = NULL,
  struc_zero = FALSE,
  neg_lb = FALSE,
  alpha = 0.05,
  verbose = FALSE,
  global = FALSE,
  pairwise = FALSE,
  dunnet = FALSE,
  trend = FALSE)

resAP = AnAP$res

#ANCOMBC for removed Ofavs #shows 1 sig. abundant taxa
AnOfav2 = ancombc2(
  phyOfav2_filt,
  assay_name = "otu_table",
  fix_formula = "Treatment",
  rand_formula = NULL,
  p_adj_method = "holm",
  prv_cut = 0.1,
  lib_cut = 0,
  s0_perc = 0.05,
  group = NULL,
  struc_zero = FALSE,
  neg_lb = FALSE,
  alpha = 0.05,
  verbose = FALSE,
  global = FALSE,
  pairwise = FALSE,
  dunnet = FALSE,
  trend = FALSE)

resOfav2 = AnOfav2$res
#linking the taxon that is significantly abundant to a taxonomy table to see what it is
#just searched it in the taxonomy table and it came up as an alphaproteobacteria


#ANCOMBC for removed Ofavs #shows 1 sig. abundant taxa
AnOfav3 = ancombc2(
  phyOfav3_filt,
  assay_name = "otu_table",
  fix_formula = "Treatment",
  rand_formula = NULL,
  p_adj_method = "holm",
  prv_cut = 0.1,
  lib_cut = 0,
  s0_perc = 0.05,
  group = NULL,
  struc_zero = FALSE,
  neg_lb = FALSE,
  alpha = 0.05,
  verbose = FALSE,
  global = FALSE,
  pairwise = FALSE,
  dunnet = FALSE,
  trend = FALSE)

resOfav3 = AnOfav3$res

#############################################################################################

## VISUALIZING ANCOMBC RESULTS ##

#create a volcano plot for Mcav and OFav ANCOMBC family level
volcanoMO = ggplot(resMO, aes(x = lfc_TreatmentDisease, y = p_TreatmentDisease)) +
  geom_point() +
  labs(x = "log2 Fold Change", y = "p-value",
       title = "Mcav Ofav Volcano Plot") +
  theme_minimal()

#display the plot
print(volcanoMO)

#create a volcano plot for Acer and Past ANCOMBC family level
volcanoAP = ggplot(resAP, aes(x = lfc_TreatmentDisease, y = p_TreatmentDisease)) +
  geom_point() +
  labs(x = "log2 Fold Change", y = "p-value",
       title = "Acer Past Volcano Plot") +
  theme_minimal()

#display the plot
print(volcanoAP)

#############################################################################################

#### MORE PHYLOSEQ ANALYSIS ####

## ALPHA DIVERSITY ##

#Defining significance for wilcox.test
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns"))

#Plotting richness for Porites only
comparisons_material_5 = list( c("Control", "Disease"))
plot_richness(phyP_filt, x="Treatment",color = "CoralSpecies", measure=c("Chao1")) +
  geom_boxplot(alpha=0.2)+
  stat_compare_means(method = "wilcox.test", comparisons = comparisons_material_5, label = "p.signif", symnum.args = symnum.args)

#Plotting richness for Mcav only
#Warning to use untrimmed data bc no singletons
comparisons_material_5 = list( c("Control", "Disease"))
plot_richness(phyMcav_filt, x="Treatment",color = "CoralSpecies", measure=c("Chao1")) +
  geom_boxplot(alpha=0.2)+
  stat_compare_means(method = "wilcox.test", comparisons = comparisons_material_5, label = "p.signif", symnum.args = symnum.args)

#Plotting richness for Ofav only
#Warning to use untrimmed data bc no singletons
comparisons_material_5 = list( c("Control", "Disease"))
plot_richness(phyOfav3_filt, x="Treatment",color = "CoralSpecies", measure=c("Chao1")) +
  geom_boxplot(alpha=0.2)+
  stat_compare_means(method = "wilcox.test", comparisons = comparisons_material_5, label = "p.signif", symnum.args = symnum.args)

#Cant do one for Acer only with only 2 samples

#Estimate richness function that returns a table full of shannon and simpson tests
richMO = estimate_richness(phyMO_filt)
richMO
richAP = estimate_richness(phyAP_filt)
richOfav = estimate_richness(phyOfav2)
richOfav

## Unfiltered phyloseq's for alpha diversity ##

phy_prune = prune_taxa(taxa_sums(phy_sub)>0, phy_sub)
plot_richness(phy_prune, x="Treatment", color = "CoralSpecies", measures=c("Shannon"))

Ofav_prune = prune_taxa(taxa_sums(phyOfav2)>0, phyOfav2)
plot_richness(Ofav_prune, x="Treatment", color = "CoralSpecies", measures=c("Chao1", "Shannon"))

Mcav_prune = prune_taxa(taxa_sums(phyMcav)>0, phyMcav)
plot_richness(Mcav_prune, x="Treatment", color = "CoralSpecies", measures=c("Chao1", "Shannon"))

Past_prune = prune_taxa(taxa_sums(phyP)>0, phyP)
plot_richness(Past_prune, x="Treatment", color = "CoralSpecies", measures=c("Chao1", "Shannon"))
#still getting the warning to use unfiltered data ???

#############################################################################################

## RELATIVE ABUNDANCE ##

Example.Colors = (values = c("#8fa746","#404b1f","#8FBC8F",
                                      "#3CB371","tan", "gold3", "#D5D5FF", "#5F7FC7", "orange","#ADFF2F", 
                                      "#CD9BCD", "gray80", "darkolivegreen4", "#673770","#D14285", 
                                      "#8569D5", "#5E738F","#FFFFCC", "#E6FFE6", "#E0FFFF", "#FFE6CC",
                                      "#F2DACE","#AD6F3B",  "dodgerblue2", "#E31A1C","chocolate",
                                      "green4", "#6A3D9A", "#FF7F00","pink", "turquoise1", "darkgoldenrod1",
                                      "black", "gold1","skyblue2", "#FB9A99", "palegreen2", "#FF4500",
                                      "#CAB2D6","#FDBF6F", "gray70", "khaki2","#A50E82","#E9A039", "#CD3700",
                                      "maroon1", "orchid1", "deeppink2", "blue3", "steelblue4","#5D478B",
                                      "darkturquoise", "green1", "yellow4","#F3E5F5","gray31", "aliceblue",
                                      "darkorange4", "darkolivegreen1", "yellow", "red3", "blue", "indianred",
                                      "lightblue", "salmon","navy", "#CBD588","#FFC0E5", "white", "#778899",
                                      "lightblue1", "ivory4", "darkorchid", "palevioletred1", "magenta3",
                                      "#DA5724","#404b1f","#8FBC8F", "#CDBE70", "lightsalmon4", "magenta",
                                      "khaki1","#41636f","#00AEEF","#8bbfd2","brown4","#AD6F3B",
                                      "#90EE90","#8fa746", "#7B68EE", "brown1",))

#Mcav relative abundance by family level
Mcav_clr = microbiome::transform(phyMcav_filt, "clr")
Mcav_comp = microbiome::transform(phyMcav_filt, 'compositional') %>%
  tax_glom("Family")
Mcav_melt =  psmelt(Mcav_comp) 

Mcav_all = transform_sample_counts(phyMcav_filt, function(x) x / sum(x)) %>%
  tax_glom("Family")%>% psmelt()

mutate_if(Mcav_all,
          is.character, 
          stringr::str_replace_all, 
          pattern = "f__",
          replacement = "") %>%
  subset(Abundance > 0.04) %>%
  ggplot(  
    aes(x=Sample, y=Abundance, fill=Family)) + 
  geom_bar(stat="identity", position="fill") +
  facet_wrap("Treatment", scales = "free") +
  scale_fill_manual(values=c("#234d20",
                                      "#36802d", 
                                      "#9BBB59",
                                      "#A7B789",
                                      "#C2BC80",
                                      "#A0988C",
                                      "#9B7362",
                                      "#A0522D",
                                      "#A53010",
                                      "#C0504D",
                                      "#FFBABA",
                                      "#BD5282",
                                      "#9B59B6",
                                      "#EFBBFF",
                                      "#BE29EC",
                                      "#FFD92F",
                                      "#FEE080",
                                      "#E6AB02",
                                      "#FDAE61",
                                      "#FF8523",
                                      "#D95F02",
                                      "#87AFD1",
                                      "#B1D6C5",
                                      "#00A08A",
                                      "#ADD0E1",
                                      "#506598",
                                      "#14405A")) +
                                        theme_classic() +
  theme(axis.title.x=element_text(size = 12, vjust = -1),
        axis.title.y = element_text(size = 12, vjust = +2),
        axis.text.y = element_text(size =10),
        axis.text.x = element_text(angle = 45, size =10, hjust = 1, vjust =1),
        legend.text = element_text(size = 9),
        legend.title = element_text(size = 11),
        legend.key.size = unit(0.5, 'cm'))+
  theme(strip.text.x = element_text(size = 10))+
  guides(fill=guide_legend(ncol=1))+
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
  ylab("Relative Abundance") + xlab("M. cavernosa samples")

plot(Mcav_RA)


#Ofav relative abundance by Family level
Ofav_clr = microbiome::transform(phyOfav_filt, "clr")
Ofav_comp = microbiome::transform(phyOfav_filt, 'compositional') %>%
  tax_glom("Family")
Ofav_melt =  psmelt(Ofav_comp) 

Ofav_all = transform_sample_counts(phyOfav_filt, function(x) x / sum(x)) %>%
  tax_glom("Family")%>% psmelt()
Ofav_all

mutate_if(Ofav_all,
          is.character, 
          stringr::str_replace_all, 
          pattern = "f__",
          replacement = "") %>%
  subset(Abundance > 0.04) %>%
  ggplot(  
    aes(x=Sample, y=Abundance, fill=Family)) + 
  geom_bar(stat="identity", position="fill") +
  facet_wrap("Treatment", scales = "free") +
  scale_fill_manual(values=c("#234d20",
                             "#36802d", 
                             "#9BBB59",
                             "#A7B789",
                             "#C2BC80",
                             "#A0988C",
                             "#9B7362",
                             "#A0522D",
                             "#A53010",
                             "#C0504D",
                             "#FFBABA",
                             "#BD5282",
                             "#9B59B6",
                             "#EFBBFF",
                             "#BE29EC",
                             "#FFD92F",
                             "#FEE080",
                             "#E6AB02",
                             "#FDAE61",
                             "#FF8523",
                             "#D95F02",
                             "#87AFD1",
                             "#B1D6C5",
                             "#00A08A",
                             "#ADD0E1",
                             "#506598",
                             "#14405A")) +
                                        theme_classic() +
  theme(axis.title.x=element_text(size = 12, vjust = -1),
        axis.title.y = element_text(size = 12, vjust = +2),
        axis.text.y = element_text(size =10),
        axis.text.x = element_text(angle = 45, size =10, hjust = 1, vjust =1),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 12),
        legend.key.size = unit(0.5, 'cm'))+
  theme(strip.text.x = element_text(size = 10))+
  guides(fill=guide_legend(ncol=1))+
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
  ylab("Relative Abundance") + xlab("O. faveolata Samples")

plot(Ofav_RA)


#Removed Ofav CONTROLS relative abundance by Family level
Ofav2_clr = microbiome::transform(phyOfav2_filt, "clr")
Ofav2_comp = microbiome::transform(phyOfav2_filt, 'compositional') %>%
  tax_glom("Family")
Ofav2_melt =  psmelt(Ofav2_comp) 

Ofav2_all = transform_sample_counts(phyOfav2_filt, function(x) x / sum(x)) %>%
  tax_glom("Family")%>% psmelt()
Ofav2_all

mutate_if(Ofav2_all,
          is.character, 
          stringr::str_replace_all, 
          pattern = "f__",
          replacement = "") %>%
  subset(Abundance > 0.04) %>%
  ggplot(  
    aes(x=Sample, y=Abundance, fill=Family)) + 
  geom_bar(stat="identity", position="fill") +
  facet_wrap("Treatment", scales = "free") +
  scale_fill_manual(values=c("#234d20",
                                      "#36802d", 
                                      "#9BBB59",
                                      "#A7B789",
                                      "#C2BC80",
                                      "#A0988C",
                                      "#9B7362",
                                      "#A0522D",
                                      "#A53010",
                                      "#C0504D",
                                      "#FFBABA",
                                      "#BD5282",
                                      "#9B59B6",
                                      "#EFBBFF",
                                      "#BE29EC",
                                      "#FFD92F",
                                      "#FEE080",
                                      "#E6AB02",
                                      "#FDAE61",
                                      "#FF8523",
                                      "#D95F02",
                                      "#87AFD1",
                                      "#B1D6C5",
                                      "#00A08A",
                                      "#ADD0E1",
                                      "#506598",
                                      "#14405A")) +
                                        theme_classic() +
  theme(axis.title.x=element_text(size = 12, vjust = -1),
        axis.title.y = element_text(size = 12, vjust = +2),
        axis.text.y = element_text(size =10),
        axis.text.x = element_text(angle = 45, size =10, hjust = 1, vjust =1),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 12),
        legend.key.size = unit(0.5, 'cm'))+
  theme(strip.text.x = element_text(size = 10))+
  guides(fill=guide_legend(ncol=1))+
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
  ylab("Relative Abundance") + xlab("O. faveolata Samples")

plot(Ofav2_RA)

#Removed Ofav PAIRS relative abundance by Family level
Ofav3_clr = microbiome::transform(phyOfav3_filt, "clr")
Ofav3_comp = microbiome::transform(phyOfav3_filt, 'compositional') %>%
  tax_glom("Family")
Ofav3_melt =  psmelt(Ofav3_comp) 

Ofav3_all = transform_sample_counts(phyOfav3_filt, function(x) x / sum(x)) %>%
  tax_glom("Family")%>% psmelt()
Ofav3_all

mutate_if(Ofav3_all,
          is.character, 
          stringr::str_replace_all, 
          pattern = "f__",
          replacement = "") %>%
  subset(Abundance > 0.04) %>%
  ggplot(  
    aes(x=Sample, y=Abundance, fill=Family)) + 
  geom_bar(stat="identity", position="fill") +
  facet_wrap("Treatment", scales = "free") +
  scale_fill_manual(values=c("#234d20",
                                      "#36802d", 
                                      "#9BBB59",
                                      "#A7B789",
                                      "#C2BC80",
                                      "#A0988C",
                                      "#9B7362",
                                      "#A0522D",
                                      "#A53010",
                                      "#C0504D",
                                      "#FFBABA",
                                      "#BD5282",
                                      "#9B59B6",
                                      "#EFBBFF",
                                      "#BE29EC",
                                      "#FFD92F",
                                      "#FEE080",
                                      "#E6AB02",
                                      "#FDAE61",
                                      "#FF8523",
                                      "#D95F02",
                                      "#87AFD1",
                                      "#B1D6C5",
                                      "#00A08A",
                                      "#ADD0E1",
                                      "#506598",
                                      "#14405A")) +
                                        theme_classic() +
  theme(axis.title.x=element_text(size = 12, vjust = -1),
        axis.title.y = element_text(size = 12, vjust = +2),
        axis.text.y = element_text(size =10),
        axis.text.x = element_text(angle = 45, size =10, hjust = 1, vjust =1),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 12),
        legend.key.size = unit(0.5, 'cm'))+
  theme(strip.text.x = element_text(size = 10))+
  guides(fill=guide_legend(ncol=1))+
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
  ylab("Relative Abundance") + xlab("O. faveolata Samples")

plot(Ofav3_RA)


#Porites relative abundance by Family level
P_clr = microbiome::transform(phyP_filt, "clr")
P_comp = microbiome::transform(phyP_filt, 'compositional') %>%
  tax_glom("Family")
P_melt =  psmelt(P_comp) 

P_all = transform_sample_counts(phyP_filt, function(x) x / sum(x)) %>%
  tax_glom("Family")%>% psmelt()

mutate_if(P_all,
          is.character, 
          stringr::str_replace_all, 
          pattern = "f__",
          replacement = "") %>%
  subset(Abundance > 0.03) %>%
  ggplot(  
    aes(x=Sample, y=Abundance, fill=Family)) + 
  geom_bar(stat="identity", position="fill") +
  facet_wrap("Treatment", scales = "free") +
  scale_fill_manual(values=c("#234d20",
                                      "#36802d", 
                                      "#9BBB59",
                                      "#A7B789",
                                      "#C2BC80",
                                      "#A0988C",
                                      "#9B7362",
                                      "#A0522D",
                                      "#A53010",
                                      "#C0504D",
                                      "#FFBABA",
                                      "#BD5282",
                                      "#9B59B6",
                                      "#EFBBFF",
                                      "#BE29EC",
                                      "#FFD92F",
                                      "#FEE080",
                                      "#E6AB02",
                                      "#FDAE61",
                                      "#FF8523",
                                      "#D95F02",
                                      "#87AFD1",
                                      "#B1D6C5",
                                      "#00A08A",
                                      "#ADD0E1",
                                      "#506598",
                                      "#14405A")) +
                                        theme_classic() +
  theme(axis.title.x=element_text(size = 12, vjust = -1),
        axis.title.y = element_text(size = 12, vjust = +2),
        axis.text.y = element_text(size =10),
        axis.text.x = element_text(angle = 45, size =10, hjust = 1),
        legend.text = element_text(size = 11),
        legend.title = element_text(size = 13),
        legend.key.size = unit(0.5, 'cm'))+
  theme(strip.text.x = element_text(size = 10))+
  guides(fill=guide_legend(ncol=1))+
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
  ylab("Relative Abundance") + xlab("P. asteroides Samples")

plot(P_RA)

#Acropora relative abundance by Family level
A_clr = microbiome::transform(phyA_filt, "clr")
A_comp = microbiome::transform(phyA_filt, 'compositional') %>%
  tax_glom("Family")
A_melt =  psmelt(A_comp) 

A_all = transform_sample_counts(phyA_filt, function(x) x / sum(x)) %>%
  tax_glom("Family")%>% psmelt()
A_all
mutate_if(A_all,
          is.character, 
          stringr::str_replace_all, 
          pattern = "f__",
          replacement = "") %>%
  subset(Abundance > 0.01) %>%
  ggplot(  
    aes(x=Sample, y=Abundance, fill=Family)) + 
  geom_bar(stat="identity", position="fill") +
  facet_wrap("Treatment", scales = "free") +
  scale_fill_manual(values=c("#234d20",
                                      "#36802d", 
                                      "#9BBB59",
                                      "#A7B789",
                                      "#C2BC80",
                                      "#A0988C",
                                      "#9B7362",
                                      "#A0522D",
                                      "#A53010",
                                      "#C0504D",
                                      "#FFBABA",
                                      "#BD5282",
                                      "#9B59B6",
                                      "#EFBBFF",
                                      "#BE29EC",
                                      "#FFD92F",
                                      "#FEE080",
                                      "#E6AB02",
                                      "#FDAE61",
                                      "#FF8523",
                                      "#D95F02",
                                      "#87AFD1",
                                      "#B1D6C5",
                                      "#00A08A",
                                      "#ADD0E1",
                                      "#506598",
                                      "#14405A")) +
                                        theme_classic() +
  theme(axis.title.x=element_text(size = 12, vjust = -1),
        axis.title.y = element_text(size = 12, vjust = +2),
        axis.text.y = element_text(size =10),
        axis.text.x = element_text(angle = 45, size =10, hjust = 1),
        legend.text = element_text(size = 11),
        legend.title = element_text(size = 13),
        legend.key.size = unit(0.5, 'cm'))+
  theme(strip.text.x = element_text(size = 10))+
  guides(fill=guide_legend(ncol=1))+
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1)) +
  ylab("Relative Abundance") + xlab("A. cervicornis Samples")

plot(A_RA)


#############################################################

## CORE MEMBERS ##

#find the core members of the microbiome for Mcav and Ofav
phyrelMO = microbiome::transform(phyMO_filt, "compositional")
coreMO = core_members(phyrelMO,
                       detection = 0.001, # 0.001 in at least 90% samples 
                       prevalence = 0.10) 

#get the taxonomic information aligned for Mcav and Ofav core taxa
core_taxaMO = tax_table(phyMO_filt)[coreMO]
print(core_taxaMO)

#find the core members of the microbiome for Acer and Past
phyrelAP = microbiome::transform(phyAP_filt, "compositional")
coreAP = core_members(phyrelAP,
                    detection = 0.001, # 0.001 in at least 90% samples 
                    prevalence = 0.10) 

#get the taxonomic information aligned for Acer and Past core taxa
core_taxaAP = tax_table(phyAP)[coreAP]
print(core_taxaAP)

#convert core taxa to a data frame and filter out any core taxa that have NA's in the phylum column
coreMOdf = as.data.frame(core_taxa) #351 obs
coreAPdf = as.data.frame(core_taxaAP) #142 obs
coreMOdf_filtered <- filter(coreMOdf, !is.na(Phylum)) #335 obs
coreAPdf_filtered <- filter(coreAPdf, !is.na(Phylum)) #130 obs

#plotting the core taxa for MO at family level
ggplot(coreMOdf_filtered, aes(x = Family)) +
  geom_bar(fill = "purple") +
  labs(x = "Family", y = "Count", title = "Mcav Ofav Taxa at Family Level") +
  theme_minimal()+ 
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

#plotting the core taxa for AP at family level
ggplot(coreAPdf_filtered, aes(x = Family)) +
  geom_bar(fill = "skyblue") +
  labs(x = "Family", y = "Count", title = "Acer Past Taxa at Family Level") +
  theme_minimal()+ 
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

#############################################################################################

## BETA-DIVERSITY ##

#Beta diversity for MO on a pca plot 
phyMO_clr = microbiome::transform(phyMO_filt, 'clr')
phyMO_ord = ordinate(phyMO_clr, "RDA", "euclidean")
plot_ordination(phyMO_clr,phyMO_ord, type = "samples", color="Treatment", shape="CoralSpecies")

#Beta diversity for AP on a pca plot 
phyAP_clr = microbiome::transform(phyAP_filt, 'clr')
phyAP_ord = ordinate(phyAP_clr, "RDA", "euclidean")
plot_ordination(phyAP_clr,phyAP_ord, type = "samples", color="Treatment", shape = "CoralSpecies")

#############################################################################################

## WILCOXON TEST ## 

#Extracting the abundance data from the phyMcav_filt phyloseq object and converting it into a numeric vector
wiltest = as.numeric(otu_table(phyMcav_filt)[, 1])
as.data.frame(wiltest)
#Wilcoxon test
wilcox.test(wiltest, y = NULL,
            alternative = "two.sided",
            mu = 0, paired = FALSE, exact = NULL, correct = TRUE,
            conf.int = TRUE, conf.level = 0.99)

#Wilcoxon signed rank test with continuity correction
#data:  wiltest
#V = 378, p-value = 5.88e-06
#alternative hypothesis: true location is not equal to 0
#99 percent confidence interval:
#  37.00004 1662.50006
#sample estimates:
#  (pseudo)median 
#210.5 

#Extracting the abundance data from the phyOfav_filt phyloseq object and converting it into a numeric vector
wiltest = as.numeric(otu_table(phyOfav_filt)[, 1])
as.data.frame(wiltest)
#Wilcoxon test
wilcox.test(wiltest, y = NULL,
            alternative = "two.sided",
            mu = 0, paired = FALSE, exact = NULL, correct = TRUE,
            conf.int = TRUE, conf.level = 0.99)

#Wilcoxon signed rank test with continuity correction
#data:  wiltest
#V = 15400, p-value < 2.2e-16
#alternative hypothesis: true location is not equal to 0
#99 percent confidence interval:
#  34.00001 62.50000
#sample estimates:
#  (pseudo)median 
#47 

#Extracting the abundance data from the phyAP_filt phyloseq object and converting it into a numeric vector
wiltestAP = as.numeric(otu_table(phyAP_filt)[, 1])
as.data.frame(wiltestAP)
#Wilcoxon test
wilcox.test(wiltestAP, y = NULL,
            alternative = "two.sided",
            mu = 0, paired = FALSE, exact = NULL, correct = TRUE,
            conf.int = TRUE, conf.level = 0.99)

#Wilcoxon signed rank test with continuity correction
#data:  wiltestAP
#V = 8778, p-value < 2.2e-16
#alternative hypothesis: true location is not equal to 0
#99 percent confidence interval:
#  38.50001 83.00004
#sample estimates:
#  (pseudo)median 
#54.50002

#############################################################################################

## PERMUTATIONAL ANOVA ##

#Test whether the Treatments among Mcav only differ significantly from each other using the permutational ANOVA 
anova_Mcav = phyloseq::distance(phyMcav_filt, method = "euclidean")
pairwise.adonis(t(otu_table(phyMcav_filt)), sample_data(phyMcav_filt)$Treatment, sim.method = "euclidean",
                p.adjust.m = "bonferroni")
#pairs                Df  SumsOfSqs   F.Model        R2       p.value     p.adjusted   sig
#1 Disease vs Control  1  478523212   1.648107     0.0933872   0.362      0.362  

#Test whether the Treatments among Ofav only differ significantly from each other using the permutational ANOVA 
anova_Ofav = phyloseq::distance(phyOfav_filt, method = "euclidean")
pairwise.adonis(t(otu_table(phyOfav_filt)), sample_data(phyOfav_filt)$Treatment, sim.method = "euclidean",
                p.adjust.m = "bonferroni")
#pairs                Df  SumsOfSqs   F.Model      R2         p.value    p.adjusted    sig
#1 Control vs Disease  1  99199975   0.9661692    0.1077572   0.569      0.569 

#Test whether the Treatments among Removed Ofav differ significantly from each other using the permutational ANOVA 
anova_Ofav2 = phyloseq::distance(phyOfav2_filt, method = "euclidean")
pairwise.adonis(t(otu_table(phyOfav2_filt)), sample_data(phyOfav2_filt)$Treatment, sim.method = "euclidean",
                p.adjust.m = "bonferroni")
#pairs                Df   SumsOfSqs   F.Model      R2         p.value    p.adjusted    sig
#1 Control vs Disease  1  78458742    0.5930492    0.08995068   0.784      0.784 

#Test whether the Treatments among Removed Ofav PAIRS differ significantly from each other using the permutational ANOVA 
anova_Ofav3 = phyloseq::distance(phyOfav3_filt, method = "euclidean")
pairwise.adonis(t(otu_table(phyOfav3_filt)), sample_data(phyOfav3_filt)$Treatment, sim.method = "euclidean",
                p.adjust.m = "bonferroni")
#pairs                Df  SumsOfSqs   F.Model      R2          p.value    p.adjusted    sig
#1 Control vs Disease  1  17190252    0.6942538    0.1478944     0.7        0.7  

#Test whether the Treatments among Acer and Past differ significantly from each other using the permutational ANOVA 
anova_AP = phyloseq::distance(phyAP_filt, method = "euclidean")
pairwise.adonis(t(otu_table(phyAP_filt)), sample_data(phyAP_filt)$Treatment, sim.method = "euclidean",
                p.adjust.m = "bonferroni")
#pairs                Df  SumsOfSqs   F.Model      R2          p.value    p.adjusted    sig
#1 Disease vs Control  1   293616046  0.5486262   0.06417712       1          1   
